---
title: 'Chapter 1: The Magic of ggplot2' 
description: Learn how ggplot2 turns variables into statistical graphics
format: 
  html:
    echo: false
engine: knitr
filters: 
  - webr
webr:
  packages:
    - ggplot2
    - gapminder
    - checkdown
    - dplyr
prev: null
next: /chapter2
id: 1
type: chapter
---

```{webr-r}
#| context: setup
options(warn = -1, show.error.messages = FALSE)
library(dplyr)
library(ggplot2)
library(gapminder)
gap1992 <- gapminder %>% filter(year == 1992)

```


# `data.frame`s and How to Use Them

Let's review the basics of `data.frame`s.

A `data.frame` is a table-like format which has the following properties: 

![](static/tidy-1.png)

- Columns can each have a different type (`numeric`, `character`, `boolean`, `factor`)
- Columns are called "variables"
- Rows correspond to a single observation (ideally)
- Can be subset or filtered based on criteria

Individual variables within a `data.frame` can be accessed with the `$` operator (such as `gap1992$pop`). We won't use this very often, as the `tidyverse` lets us access the variables without it, as you'll see.

- Run `colnames()` and `head()` on the `gap1992` data to see what's in each column. 
- Then see how many rows there are in the dataset using `nrow()`. Run these in console before you submit your answer.


::: {.panel-tabset}
## Exercise

```{webr-r}
##run head on gap1992
head(----)
##run colnames here on gap1992
colnames(----)
##run nrow() on gap1992
nrow(-----)

```

## Solution

```{webr-r}
##run head on gap1992
head(gap1992)
##run colnames here on gap1992
colnames(gap1992)
##run nrow() on gap1992
nrow(gap1992)

```

:::


## Thinking about aesthetics

Now that we've learned a little about the `data.frame`, we can get to the fun part: making graphs.

The first thing we are going to is think about how we represent variables in a plot. 

How do we visually represent a variable in our dataset? Take a look at this graph. What variable is mapped to `y`, and what is mapped to `x`, and what is mapped to `color`?


![](static/gap1992.png)

```{r}
checkdown::check_question("y = lifeExp, x = log(gdpPercap), color = continent", 
                          options=c("x = gdpPercap, y = log(lifeExp), color = continent",
                                    "x = continent, y = year, color = pop",
                                    "y = lifeExp, x = log(gdpPercap), color = continent"),
                          type="radio")

```

# Mapping variables to produce geometric plots

A statistical graphic consists of:

+ A `mapping` of variables in `data` to
+ `aes()`thetic attributes of
+ `geom_`etric objects.

In code, this is translated as:

```{r}
#| eval: false
#| echo: true
ggplot(data = gap1992, mapping = aes(x = log(gdpPercap), y=log(pop))) +
  geom_point()
```

Let's take the above example code apart. A `ggplot2` call always starts with the `ggplot()` function. In this function, we need two things:

1. `data` - in this case, `gap1992`.
2. `mapping` - An aesthetic mapping, using the `aes()` function. 

In order to map our variables to aesthetic properties, we will need to use `aes()`, which is our `aes()`thetic mapping function. In our example, we map `x` to `log(gdpPercap)` and `y` to `log(pop)`.

Finally, we can superimpose our geometry on the plot using `geom_point()`.

Based on the graph below, map the appropriate variables to the `x`, and `y` aesthetics. Run your plot. Remember, you can try plots out in the console before you submit your answer.

![](static/gap1992.png)

Hint: Look at the graph. If you need the variable names, they are listed below.

```{webr-r}
#| context: output
colnames(gap1992)
```


::: {.panel-tabset}
## Exercise

```{webr-r}
ggplot(data = gap1992, 
    mapping = aes(
      x = ------, 
      y = ------ 
      )) + 
geom_point()
```


## Solution

```{webr-r}
ggplot(data=gap1992, 
    mapping = aes(
      x = log(gdpPercap), 
      y = lifeExp 
      )) + 
geom_point()

```
:::

# More about `aes()`

For `geom_point()`, there are lots of other aesthetics. The important thing to know is that
aesthetics are properties of the `geom`. If you need to know the aesthetics that you can 
map to a `geom`, you can always use `help()` (such as `help(geom_point)`).

For a list of aesthetics for `geom_point()`, look here: [http://ggplot.yhathq.com/docs/geom_point.html](http://ggplot.yhathq.com/docs/geom_point.html)
and look at all the aesthetic mappings. For example:

## Aesthetics

`geom_point()` understands the following aesthetics (required aesthetics are in bold):

- `**x**`
- `**y**`
- `alpha`
- `colour`
- `fill`
- `group`
- `shape`
- `size`
- `stroke`

Which of the following is *not* a mappable aesthetic to `geom_point()`?

```{r}
checkdown::check_question("linetype", options = c("x", "shape", "linetype"), type="radio")
```

# Points versus lines

The great thing about `ggplot2` is that it's easy to swap representations. 
Instead of x-y points, we can plot the data as a line graph by swapping `geom_line()`
for `geom_point()`.

First run the code to see the plot with points. Change the `geom_point()` in the following graph to `geom_line()`. What happened?
How did the visual presentation of the data change?

:::{.panel-tabset}

## Exercise

```{webr-r}
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
  geom_point() 
```

## Solution

```{webr-r}
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
  geom_line() 
```

:::

# Geoms are layers on a ggplot

We are not restricted to a single geom on a graph! You can think of geoms
as layers on a graph. Thus, we can use the `+` symbol to add geoms to our
base `ggplot()` statement. 

Add both `geom_line()` and `geom_point()` to the following ggplot. Are the results what you expected?

::: {.panel-tabset}

## Exercise

```{webr-r}
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
## add code here

```


## Solution

```{webr-r}
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
## add code here
  geom_line() + geom_point()
```

:::


# Quick review about `ggplot2`

What does the `+` in a `ggplot` statement do? 

For example:

```{r}
#| eval: false
ggplot(gap1992, aes(x = log(gdpPercap), y = lifeExp, color=continent)) +
  geom_line() + geom_point()
```

```{r}
checkdown::check_question("allows you to chain data and geoms together into a single statistical graphic", options = c("allows you to chain data and geoms together into a single statistical graphic", "adds one `data.frame` to another `data.frame` ","allows you to add variables together in a `data.frame`"), type="radio")

```


# Final Challenge: Recreate this Gapminder Plot

Your final challenge is to completely recreate this graph using the `gap1992` data.

![](static/gap1992.png)

- If you need to remember variable names, you can always call `head(gap1992)` or `colnames(gap1992)` in the console.
- Recreate the above graphic by mapping the right variables to the right aesthetic elements. Remember, you can try plots out in the console before you submit your answer.

::: {.panel-tabset}

## Exercise

```{webr-r}
ggplot(gap1992, aes(x = , 
    y = , 
    color = ,
    size =
    )) + ggtitle("Gapminder for 1992") +

```

## Solution

```{webr-r}
ggplot(gap1992, aes(x = log(gdpPercap), 
    y = lifeExp, 
    color = continent,
    size = pop
    )) + ggtitle("Gapminder for 1992") + 
    geom_point()
```

:::

# What you learned in this chapter

- Basic `ggplot2` syntax.
- Plotting x-y data using `ggplot2` using both `geom_point()` and `geom_bar()`.
- Mapping variables in a dataset to visual properties using `aes()`
- `geom`s correspond to layers in a graph.
- That `ggplot2` can make some pretty cool graphs
- That you can do this!

**More Resources**

- [R For Data Science: Visualization](https://r4ds.had.co.nz/data-visualisation.html). The visualization chapter of R for Data Science. Especially useful are the [Aesthetic Mapping](https://r4ds.had.co.nz/data-visualisation.html#aesthetic-mappings) and the [common problems](https://r4ds.had.co.nz/data-visualisation.html#common-problems) sections.
- There's a lot more to `ggplot2`! Take a look at [The Layered Grammar of Graphics](https://r4ds.had.co.nz/data-visualisation.html#the-layered-grammar-of-graphics) to see the other ways we can modify plots, such as scales and coordinates.
